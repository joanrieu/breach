{"version":3,"sources":["game.js"],"names":["canvas","document","querySelector","ctx","getContext","translate","width","height","scale","isDown","body","addEventListener","e","key","components","transforms","bat","x","y","w","h","ball","Math","random","batSprites","color","batBodies","speed","vx","batControls","brickSprites","brickBodies","ballSprites","ballBodies","dtAcc","anchor","i","id","hits","systems","batRenderer","draw","Object","entries","sprite","fillStyle","fillRect","brickRenderer","ballRenderer","beginPath","ellipse","PI","fill","ballPhysics","update","dt","transform","denied","dx","dy","vy","id2","body2","x2","y2","w2","h2","sqrt","values","abs","batController","left","ArrowLeft","q","a","right","ArrowRight","d","shoot","z","s","Enter","ballId","ballBody","ballTransform","batPhysics","max","oldX","min","lastTimeMs","timeMs","system","clearRect","save","restore","requestAnimationFrame","bind"],"mappings":"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","file":"game.85149029.js","sourceRoot":"..","sourcesContent":["const canvas = document.querySelector(\"canvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.translate(canvas.width / 2, canvas.height / 2);\nctx.scale(1, -1);\n\nconst isDown = {};\ndocument.body.addEventListener(\"keydown\", e => (isDown[e.key] = true));\ndocument.body.addEventListener(\"keyup\", e => (isDown[e.key] = false));\n\nconst components = {\n  transforms: {\n    bat: {\n      x: 0,\n      y: -230,\n      w: 100,\n      h: 10\n    },\n    ball: {\n      x: (Math.random() - 0.5) * 80,\n      y: -217.5,\n      w: 15,\n      h: 15\n    }\n  },\n\n  batSprites: {\n    bat: {\n      color: \"#b5b5b5\"\n    }\n  },\n\n  batBodies: {\n    bat: {\n      speed: 300,\n      vx: 0\n    }\n  },\n\n  batControls: {\n    bat: {}\n  },\n\n  brickSprites: {},\n\n  brickBodies: {},\n\n  ballSprites: {\n    ball: {\n      color: \"white\"\n    }\n  },\n\n  ballBodies: {\n    ball: {\n      dtAcc: 0,\n      speed: 300,\n      anchor: \"bat\"\n    }\n  }\n};\n\nfor (let i = 0; i < 48; ++i) {\n  const id = \"brick\" + i;\n  components.transforms[id] = {\n    x: ((i % 6) - 2.5) * 120,\n    y: ((i / 6) | 0) * 30,\n    w: 100,\n    h: 15\n  };\n  components.brickBodies[id] = {\n    hits: ((Math.random() * 3) | 0) + 1\n  };\n  components.brickSprites[id] = {};\n}\n\nconst systems = {\n  batRenderer: {\n    draw() {\n      for (const [id, sprite] of Object.entries(components.batSprites)) {\n        const { x, y, w, h } = components.transforms[id];\n        ctx.fillStyle = sprite.color;\n        ctx.fillRect(x - w / 2, y - h / 2, w, h);\n      }\n    }\n  },\n\n  brickRenderer: {\n    draw() {\n      for (const [id, sprite] of Object.entries(components.brickSprites)) {\n        const { x, y, w, h } = components.transforms[id];\n        ctx.fillStyle = [\"#cf3\", \"#fc3\", \"#3cf\"][\n          components.brickBodies[id].hits - 1\n        ];\n        ctx.fillRect(x - w / 2, y - h / 2, w, h);\n      }\n    }\n  },\n\n  ballRenderer: {\n    draw() {\n      for (const [id, sprite] of Object.entries(components.ballSprites)) {\n        const { x, y, w, h } = components.transforms[id];\n        ctx.fillStyle = sprite.color;\n        ctx.beginPath();\n        ctx.ellipse(x, y, w / 2, h / 2, 0, -Math.PI, Math.PI);\n        ctx.fill();\n      }\n    }\n  },\n\n  ballPhysics: {\n    update(dt) {\n      for (const [id, body] of Object.entries(components.ballBodies)) {\n        const transform = components.transforms[id];\n        body.dtAcc += dt;\n        dt = 1e-3; // small fixed step\n        while (body.dtAcc > dt) {\n          body.dtAcc -= dt;\n          if (body.anchor) {\n          } else {\n            let denied = false;\n            const dx = dt * body.speed * body.vx;\n            const dy = dt * body.speed * body.vy;\n            transform.x += dx;\n            transform.y += dy;\n            const { x, y, w, h } = transform;\n            if (x - w / 2 < -canvas.width / 2 || x + w / 2 > canvas.width / 2) {\n              body.vx *= -1;\n            }\n            if (y + h / 2 > canvas.height / 2) {\n              body.vy *= -1;\n            }\n            for (const [id2, body2] of [\n              ...Object.entries(components.batBodies),\n              ...Object.entries(components.brickBodies)\n            ]) {\n              const { x: x2, y: y2, w: w2, h: h2 } = components.transforms[id2];\n              if (id2 in components.batBodies) {\n                if (\n                  x + w / 2 > x2 - w2 / 2 &&\n                  x - w / 2 < x2 + w2 / 2 &&\n                  ((y - h / 2) | 0) === ((y2 + h2 / 2) | 0)\n                ) {\n                  body.vx = (x - x2) / (w2 / 2);\n                  body.vy = Math.sqrt(1 - body.vx ** 2);\n                  denied = true;\n                }\n              } else {\n                if (\n                  x + w / 2 > x2 - w2 / 2 &&\n                  x - w / 2 < x2 + w2 / 2 &&\n                  y + h / 2 > y2 - h2 / 2 &&\n                  y - h / 2 < y2 + h2 / 2\n                ) {\n                  if (!--body2.hits) {\n                    for (const component of Object.values(components)) {\n                      delete component[id2];\n                    }\n                  }\n                  if (Math.abs((x - x2) / w2) > Math.abs((y - y2) / h2)) {\n                    body.vx *= -1;\n                  } else {\n                    body.vy *= -1;\n                  }\n                  denied = true;\n                }\n              }\n            }\n            if (denied) {\n              transform.x -= dx;\n              transform.y -= dy;\n            }\n          }\n        }\n      }\n    }\n  },\n\n  batController: {\n    update() {\n      for (const [id, body] of Object.entries(components.batBodies)) {\n        const transform = components.transforms[id];\n        const left = isDown.ArrowLeft || isDown.q || isDown.a || false;\n        const right = isDown.ArrowRight || isDown.d || false;\n        const shoot =\n          isDown[\" \"] ||\n          isDown.z ||\n          isDown.w ||\n          isDown.s ||\n          isDown.Enter ||\n          false;\n        body.vx = right - left || 0;\n        if (shoot) {\n          for (const [ballId, ballBody] of Object.entries(\n            components.ballBodies\n          )) {\n            const ballTransform = components.transforms[ballId];\n            if (ballBody.anchor === id) {\n              ballBody.anchor = null;\n              ballBody.vx = (ballTransform.x - transform.x) / (transform.w / 2);\n              ballBody.vy = Math.sqrt(1 - ballBody.vx ** 2);\n            }\n          }\n        }\n      }\n    }\n  },\n\n  batPhysics: {\n    update(dt) {\n      for (const [id, body] of Object.entries(components.batBodies)) {\n        const transform = components.transforms[id];\n        const max = canvas.width / 2 - transform.w / 2;\n        const oldX = transform.x;\n        transform.x = Math.min(\n          max,\n          Math.max(-max, oldX + dt * body.speed * body.vx)\n        );\n        const dx = transform.x - oldX;\n        for (const [ballId, ballBody] of Object.entries(\n          components.ballBodies\n        )) {\n          if (ballBody.anchor === id) {\n            const transform = components.transforms[ballId];\n            transform.x += dx;\n          }\n        }\n      }\n    }\n  }\n};\n\nfunction draw(lastTimeMs, timeMs) {\n  const dt = (timeMs - lastTimeMs) / 1000;\n  for (const [id, system] of Object.entries(systems)) {\n    system.update?.(dt);\n  }\n  ctx.clearRect(\n    -canvas.width / 2,\n    -canvas.height / 2,\n    canvas.width,\n    canvas.height\n  );\n  for (const [id, system] of Object.entries(systems)) {\n    ctx.save();\n    system.draw?.();\n    ctx.restore();\n  }\n  requestAnimationFrame(draw.bind(null, timeMs));\n}\n\nrequestAnimationFrame(draw.bind(null, 0));\n"]}